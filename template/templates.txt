#接口自动化模板
from lib.get_yaml import doYaml
from settings import *
from lib.doRequest import Request
from lib.getLogging import Logger
import pytest

#生成filename.log文件
filename = os.path.basename(__file__)
logging = Logger(filename).getlog()
featureName = filename.split(".")[0].split("_")[1] + "接口测试"

#获取yaml文件中配置的数据
def getRequestData(file: str) -> list:
    if file.endswith('.yaml') or file.endswith('.yml'):
        rs = doYaml.get_data(os.path.join(DATA_PATH, file))
        url = URL + rs["path"]
        method = rs["method"]
        data = rs["data"]
        header = rs["header"]
        return [(url, method, data, header)]
    else:
        raise Exception("文件名只支持yaml或者yml")


class Test%(class_name)s():
    @pytest.mark.parametrize('url,method,data,header', getRequestData('%(data_file)s.yaml'))
    def test_getResult(self, url, method, data, header, login) -> bool:
        """
        :param auth:
        :return: bool
        """
        #获取auth,组成新的header
        Authorization = login
        headers = {**header, **{"Authorization": Authorization}}

        if data is not None:
            rs = self.doRequest(method=method, url=url, headers=headers, data=data)
        else:
            rs = self.doRequest(method=method, url=url, headers=headers)

        logging.info("返回值为:{}".format(rs))

        #下面接入与数据库对比

    @Request()
    def doRequest(self, **kwargs):
        logging.info("请求参数为:{}".format(kwargs))
        logging.info(50 * "---")

if __name__ == '__main__':
   pass
